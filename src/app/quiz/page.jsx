"use client";
import { useState } from "react";
import styles from "./quiz.module.css";

export default function Quiz() {
  const questions = [
    {
      question: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∞‡¶æ‡¶ú‡¶ß‡¶æ‡¶®‡ßÄ ‡¶ï‡ßã‡¶•‡¶æ‡ßü?",
      options: ["‡¶¢‡¶æ‡¶ï‡¶æ", "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ", "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ"],
      answer: "‡¶¢‡¶æ‡¶ï‡¶æ",
    },
    {
      question: "React ‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá?",
      options: ["‡¶ó‡ßÅ‡¶ó‡¶≤", "‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï", "‡¶Æ‡¶æ‡¶á‡¶ï‡ßç‡¶∞‡ßã‡¶∏‡¶´‡¶ü", "‡¶®‡ßá‡¶ü‡¶´‡ßç‡¶≤‡¶ø‡¶ï‡ßç‡¶∏"],
      answer: "‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï",
    },
    {
      question: "Next.js ‡¶ï‡ßã‡¶® ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá?",
      options: ["Vue", "React", "Angular", "Svelte"],
      answer: "React",
    },
    {
      question: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶§‡¶æ ‡¶≤‡¶æ‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶¨‡ßá?",
      options: ["‡ßß‡ßØ‡ß™‡ß≠", "‡ßß‡ßØ‡ß≠‡ßß", "‡ßß‡ßØ‡ß´‡ß®", "‡ßß‡ßØ‡ß¨‡ß´"],
      answer: "‡ßß‡ßØ‡ß≠‡ßß",
    },
    {
      question: "JavaScript ‡¶ï‡ßã‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ?",
      options: ["Compiled", "Markup", "Scripting", "Assembly"],
      answer: "Scripting",
    },
    {
      question: "HTML ‡¶è‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∞‡ßÇ‡¶™ ‡¶ï‡ßÄ?",
      options: [
        "HyperText Markup Language",
        "HighText Machine Language",
        "Hyper Tool Multi Language",
        "Hyper Transfer Markup Language",
      ],
      answer: "HyperText Markup Language",
    },
    {
      question: "CSS-‡¶è 'color' ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶ï‡ßÄ ‡¶®‡¶ø‡ßü‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá?",
      options: ["‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°", "‡¶´‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∞‡¶Ç", "‡¶¨‡¶∞‡ßç‡¶°‡¶æ‡¶∞", "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶®"],
      answer: "‡¶´‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∞‡¶Ç",
    },
    {
      question: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶¶‡ßç‡¶∞‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡ßÄ?",
      options: ["‡¶ü‡¶æ‡¶ï‡¶æ", "‡¶∞‡ßÅ‡¶™‡¶ø", "‡¶°‡¶≤‡¶æ‡¶∞", "‡¶¶‡¶ø‡¶®‡¶æ‡¶∞"],
      answer: "‡¶ü‡¶æ‡¶ï‡¶æ",
    },
    {
      question: "‡ß® + ‡ß® √ó ‡ß® ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶ï‡¶§?",
      options: ["‡ß¨", "‡ßÆ", "‡ß™", "‡ß®"],
      answer: "‡ß¨",
    },
    {
      question: "Next.js-‡¶è ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶•‡¶æ‡¶ï‡ßá?",
      options: ["src/", "pages/ ‡¶¨‡¶æ app/", "public/", "config/"],
      answer: "pages/ ‡¶¨‡¶æ app/",
    },
  ];

  const [current, setCurrent] = useState(0);
  const [score, setScore] = useState(0);
  const [finished, setFinished] = useState(false);
  const [answers, setAnswers] = useState([]); // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá

  const handleAnswer = (option) => {
    if (option === questions[current].answer) {
      setScore(score + 1);
    }

    setAnswers([
      ...answers,
      {
        question: questions[current].question,
        selected: option,
        correct: questions[current].answer,
      },
    ]);

    const next = current + 1;
    if (next < questions.length) {
      setCurrent(next);
    } else {
      setFinished(true);
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>üéØ Quiz App</h1>
      {finished ? (
        <div className={styles.result}>
          <h2>
            ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞: {score} / {questions.length}
          </h2>

          <div className={styles.answerReview}>
            {answers.map((ans, idx) => (
              <div key={idx} className={styles.answerItem}>
                <p>
                  <strong>
                    {idx + 1}. {ans.question}
                  </strong>
                </p>
                <p>
                  ‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞:{" "}
                  <span className={styles.correct}>{ans.correct}</span>
                </p>
                <p>
                  üìù ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:
                  <span
                    className={
                      ans.selected === ans.correct
                        ? styles.correct
                        : styles.wrong
                    }
                  >
                    {ans.selected}
                  </span>
                </p>
              </div>
            ))}
          </div>

          <button
            onClick={() => {
              setCurrent(0);
              setScore(0);
              setAnswers([]);
              setFinished(false);
            }}
          >
            ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶≤‡ßã
          </button>
        </div>
      ) : (
        <div className={styles.card}>
          <h2>
            {current + 1}. {questions[current].question}
          </h2>
          <ul>
            {questions[current].options.map((option, idx) => (
              <li key={idx}>
                <button
                  className={styles.optionBtn}
                  onClick={() => handleAnswer(option)}
                >
                  {option}
                </button>
              </li>
            ))}
          </ul>
          <p className={styles.progress}>
            ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® {current + 1} / {questions.length}
          </p>
        </div>
      )}
    </div>
  );
}
